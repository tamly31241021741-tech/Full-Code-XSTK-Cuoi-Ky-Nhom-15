# -*- coding: utf-8 -*-
"""XSTK cuối kì

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mIqEgDDQ9_P2SNZ4Xm2BmarRSkRW5kqI
"""

!pip install pandas scipy matplotlib seaborn statsmodels

!pip install pandas matplotlib seaborn scipy openpyxl

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
from scipy.stats import f_oneway
from IPython.display import display

# Đọc dữ liệu
df = pd.read_excel("predictive_maintenance.xlsx")

# A. THỐNG KÊ MÔ TẢ
# Đọc dữ liệu từ file Excel
df = pd.read_excel('predictive_maintenance.xlsx')

# Chọn các cột số cần phân tích
numeric_cols = ['Air temperature [K]', 'Process temperature [K]', 'Rotational speed [rpm]',
                'Torque [Nm]', 'Tool wear [min]']

# Tạo hàm tính toán các thống kê mô tả
def calculate_descriptive_stats(data):
    mode_result = stats.mode(data)
    # Check if mode_result.mode is a scalar or an array
    if np.isscalar(mode_result.mode):
        mode_value = mode_result.mode if mode_result.mode.size > 0 else np.nan
    else:
        mode_value = mode_result.mode[0] if mode_result.mode.size > 0 else np.nan

    stats_dict = {
        'Mean': np.mean(data),
        'Standard Error': stats.sem(data),
        'Median': np.median(data),
        'Mode': mode_value,
        'Standard Deviation': np.std(data, ddof=1),
        'Sample Variance': np.var(data, ddof=1),
        'Kurtosis': stats.kurtosis(data),
        'Skewness': stats.skew(data),
        'Range': np.ptp(data),
        'Minimum': np.min(data),
        'Maximum': np.max(data),
        'Sum': np.sum(data),
        'Count': len(data)
    }
    return stats_dict
# Tạo bảng thống kê mô tả cho từng cột
descriptive_stats = pd.DataFrame({col: calculate_descriptive_stats(df[col]) for col in numeric_cols})
# Chuyển đổi DataFrame để có định dạng tốt hơn
descriptive_stats = descriptive_stats.transpose()
descriptive_stats = descriptive_stats[['Count', 'Mean', 'Standard Error', 'Median', 'Mode',
                                      'Standard Deviation', 'Sample Variance', 'Kurtosis',
                                      'Skewness', 'Range', 'Minimum', 'Maximum', 'Sum']]
# Hiển thị kết quả
print("BẢNG THỐNG KÊ MÔ TẢ:")
display(descriptive_stats)

# B. THỐNG KÊ SUY DIỄN
from scipy import stats
from scipy.stats import t
import numpy as np
alpha = 0.05  # Mức ý nghĩa thống kê

# B1. Ước lượng khoảng tin cậy 95%
data = df['Rotational speed [rpm]'].dropna()
mean = np.mean(data)
sem = stats.sem(data)
conf_int = stats.t.interval(1 - alpha, len(data)-1, loc=mean, scale=sem)

print("\nƯỚC LƯỢNG KHOẢNG TIN CẬY 95% CHO TỐC ĐỘ QUAY:")
print(f"→ Trung bình: {mean} rpm")
print(f"→ Khoảng tin cậy 95%: [{conf_int[0]}, {conf_int[1]}] rpm")

# B2. Kiểm định t một mẫu
print("\nKIỂM ĐỊNH t MỘT MẪU:")
print("H0: Tốc độ quay trung bình μ = 1500 rpm")
print("Ha: Tốc độ quay trung bình μ ≠ 1500 rpm")

t_stat, p_val = stats.ttest_1samp(data, 1500)
print(f"T-statistic = {t_stat}")
print(f"P-value = {p_val}")
if p_val < alpha:
    print("=> Bác bỏ H0: Có ý nghĩa thống kê → Tốc độ quay trung bình khác 1500 rpm")
else:
    print("=> Không bác bỏ H0: Không đủ bằng chứng để kết luận tốc độ quay trung bình khác 1500 rpm")

# B3. Kiểm định t hai mẫu
print("\nKIỂM ĐỊNH t HAI MẪU (Process temperature theo Target):")
# Tách 2 nhóm theo 'Target'
group0 = df[df['Target'] == 0]['Process temperature [K]']
group1 = df[df['Target'] == 1]['Process temperature [K]']

# Thống kê từng nhóm
n1, n2 = len(group0), len(group1)
mean1, mean2 = group0.mean(), group1.mean()
std1, std2 = group0.std(ddof=1), group1.std(ddof=1)

# Tính t thực tế theo Welch's t-test
se = np.sqrt(std1**2/n1 + std2**2/n2)
t_stat = (mean1 - mean2) / se

# Bậc tự do xấp xỉ (Welch–Satterthwaite equation)
df_welch = (std1**2/n1 + std2**2/n2)**2 / ((std1**2/n1)**2/(n1-1) + (std2**2/n2)**2/(n2-1))

# Tìm t tới hạn cho mức ý nghĩa alpha = 0.05 (2 phía)
alpha = 0.05
t_critical = t.ppf(1 - alpha/2, df_welch)

# In kết quả
print("SỐ LIỆU:")
print(f"Nhóm 0 (n={n1}): Mean={mean1:.2f}, Std={std1:.2f}")
print(f"Nhóm 1 (n={n2}): Mean={mean2:.2f}, Std={std2:.2f}\n")

print("TÍNH TOÁN:")
print(f"t thực tế = {t_stat:.3f}")
print(f"bậc tự do xấp xỉ = {df_welch:.1f}")
print(f"t tới hạn (α=0.05) = ±{t_critical:.3f}")

# Kết luận
if abs(t_stat) > t_critical:
    print("=> Bác bỏ H0: Có sự khác biệt có ý nghĩa thống kê về nhiệt độ giữa hai nhóm Target")
else:
    print("=> Không bác bỏ H0: Không đủ bằng chứng để kết luận nhiệt độ trung bình giữa hai nhóm là khác nhau")

# C. ANOVA
print("\nPHÂN TÍCH ANOVA - So sánh Torque giữa các loại lỗi (Type):")
print("H0: Torque trung bình giống nhau giữa các loại lỗi (Type)")
print("Ha: Có ít nhất một nhóm Torque khác biệt")

groups = [g['Torque [Nm]'].dropna() for name, g in df.groupby('Type')]
f_stat, p_val = f_oneway(*groups)
print(f"F-statistic = {f_stat}")
print(f"P-value = {p_val}")
if p_val < alpha:
    print("=> Bác bỏ H0: Có sự khác biệt Torque giữa các loại lỗi")
else:
    print("=> Không bác bỏ H0: Không có đủ bằng chứng Torque khác nhau giữa các nhóm")

# D. TRỰC QUAN HÓA BẰNG BIỂU ĐỒ

# Biểu đồ phân phối tốc độ quay
sns.histplot(df['Rotational speed [rpm]'], kde=True, color='skyblue')
plt.title("Phân phối tốc độ quay")
plt.xlabel("Tốc độ quay [rpm]")
plt.show()

# Boxplot nhiệt độ theo Target
sns.boxplot(x='Target', y='Process temperature [K]', data=df)
plt.title("Nhiệt độ theo nhóm Target")
plt.xlabel("Target")
plt.ylabel("Process temperature [K]")
plt.show()

# Boxplot Torque theo Type
plt.figure(figsize=(10, 5))
sns.boxplot(x='Type', y='Torque [Nm]', data=df)
plt.title("So sánh Torque theo loại lỗi (Type)")
plt.xlabel("Type")
plt.ylabel("Torque [Nm]")
plt.xticks(rotation=45)
plt.show()